from langchain.tools import tool
from automation_scripts.find_all_tables import find_all_tables

@tool()
def find_table_names_tool(dummy_input: dict = {}) -> dict:
    """
    Finds all table names in the database using blind SQL injection.

    Args:
        dummy_input (str): Optional dummy input; ignored by the tool.

    Returns:
        dict: A dictionary containing the list of table names or an error message.
    """
    try:
        # return {'table_names': ['ASSIGNMENT', 'EMAIL', 'LESSON_TRACKER', 'LESSON_TRACKER_ALL_ASSIGNMENTS', 'LESSON_TRACKER_SOLVED_ASSIGNMENTS', 'USER_TRACKER', 'USER_TRACKER_LESSON_TRACKERS', 'WEB_GOAT_USER', 'ADMINISTRABLE_ROLE_AUTHORIZATIONS', 'APPLICABLE_ROLES', 'ASSERTIONS', 'AUTHORIZATIONS', 'CHARACTER_SETS', 'CHECK_CONSTRAINTS', 'CHECK_CONSTRAINT_ROUTINE_USAGE', 'COLLATIONS', 'COLUMNS', 'COLUMN_COLUMN_USAGE', 'COLUMN_DOMAIN_USAGE', 'COLUMN_PRIVILEGES', 'COLUMN_UDT_USAGE', 'CONSTRAINT_COLUMN_USAGE', 'CONSTRAINT_PERIOD_USAGE', 'CONSTRAINT_TABLE_USAGE', 'DATA_TYPE_PRIVILEGES', 'DOMAINS', 'DOMAIN_CONSTRAINTS', 'ELEMENT_TYPES', 'ENABLED_ROLES', 'INFORMATION_SCHEMA_CATALOG_NAME', 'JARS', 'JAR_JAR_USAGE', 'KEY_COLUMN_USAGE', 'KEY_PERIOD_USAGE', 'PARAMETERS', 'PERIODS', 'REFERENTIAL_CONSTRAINTS', 'ROLE_AUTHORIZATION_DESCRIPTORS', 'ROLE_COLUMN_GRANTS', 'ROLE_ROUTINE_GRANTS', 'ROLE_TABLE_GRANTS', 'ROLE_UDT_GRANTS', 'ROLE_USAGE_GRANTS', 'ROUTINES', 'ROUTINE_COLUMN_USAGE', 'ROUTINE_JAR_USAGE', 'ROUTINE_PERIOD_USAGE', 'ROUTINE_PRIVILEGES', 'ROUTINE_ROUTINE_USAGE', 'ROUTINE_SEQUENCE_USAGE', 'ROUTINE_TABLE_USAGE', 'SCHEMATA', 'SEQUENCES', 'SQL_FEATURES', 'SQL_IMPLEMENTATION_INFO', 'SQL_PACKAGES', 'SQL_PARTS', 'SQL_SIZING', 'SQL_SIZING_PROFILES', 'SYSTEM_BESTROWIDENTIFIER', 'SYSTEM_CACHEINFO', 'SYSTEM_COLUMNS', 'SYSTEM_COLUMN_SEQUENCE_USAGE', 'SYSTEM_COMMENTS', 'SYSTEM_CONNECTION_PROPERTIES', 'SYSTEM_CROSSREFERENCE', 'SYSTEM_INDEXINFO', 'SYSTEM_INDEXSTATS', 'SYSTEM_KEY_INDEX_USAGE', 'SYSTEM_PRIMARYKEYS', 'SYSTEM_PROCEDURECOLUMNS', 'SYSTEM_PROCEDURES', 'SYSTEM_PROPERTIES', 'SYSTEM_SCHEMAS', 'SYSTEM_SEQUENCES', 'SYSTEM_SESSIONINFO', 'SYSTEM_SESSIONS', 'SYSTEM_SYNONYMS', 'SYSTEM_TABLES', 'SYSTEM_TABLESTATS', 'SYSTEM_TABLETYPES', 'SYSTEM_TEXTTABLES', 'SYSTEM_TYPEINFO', 'SYSTEM_UDTATTRIBUTES', 'SYSTEM_UDTS', 'SYSTEM_USERS', 'SYSTEM_VERSIONCOLUMNS', 'TABLES', 'TABLE_CONSTRAINTS', 'TABLE_PRIVILEGES', 'TRANSLATIONS', 'TRIGGERED_UPDATE_COLUMNS', 'TRIGGERS', 'TRIGGER_COLUMN_USAGE', 'TRIGGER_PERIOD_USAGE', 'TRIGGER_ROUTINE_USAGE', 'TRIGGER_SEQUENCE_USAGE', 'TRIGGER_TABLE_USAGE', 'UDT_PRIVILEGES', 'USAGE_PRIVILEGES', 'USER_DEFINED_TYPES', 'VIEWS', 'VIEW_COLUMN_USAGE', 'VIEW_PERIOD_USAGE', 'VIEW_ROUTINE_USAGE', 'VIEW_TABLE_USAGE', 'BLOCKS', 'LOBS', 'LOB_IDS', 'PARTS', 'flyway_schema_history', 'ACCESS_CONTROL_USERS', 'ACCESS_LOG', 'CHALLENGE_USERS', 'EMPLOYEES', 'GRANT_RIGHTS', 'JWT_KEYS', 'SALARIES', 'SERVERS', 'SQL_CHALLENGE_USERS', 'USER_DATA', 'USER_DATA_TAN', 'USER_SYSTEM_DATA', 'flyway_schema_history']}
        table_names = find_all_tables()
        if not table_names:
            return {"error": "No tables found in the database."}
        return {"table_names": table_names}
    except ValueError as e:
        return {"error": str(e)}
